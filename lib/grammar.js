"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.G = undefined;

var _jsGrammar = require("@aureooms/js-grammar");

const start = "blocks";
const eof = "$";
const productions = {
  "blocks": { // blocks : 0
    "add": ["&block", "&blocks"], // 0.0
    "end": [] // 0.1
  },
  "block": { // block : 1
    "text": ['=text'], // 1.0
    "newif": ['=newif', '=ifcmd'], // 1.1
    "ifcmd": ['=ifcmd', "&blocks", "&endif"], // 1.2
    "falsecmd": ['=falsecmd'], // 1.3
    "truecmd": ['=truecmd'], // 1.4
    "comment": ['=comment'], // 1.5
    "othercmd": ['=othercmd', "&cmd*", "&cmdoptargs", "&cmdargs"], // 1.6
    "def": ['=def', '=othercmd', '={', "&blocks", '=}'], // 1.7
    "newcommand": ['=newcommand', "&cmddef"], // 1.8
    "{blocks}": ['={', "&blocks", '=}'], // 1.9
    "[blocks]": ['=[', "&blocks", '=]'], // 1.10
    "*": ['=*'], // 1.11
    "arg": ['=arg'] // 1.12
  },
  "endif": { // endif : 2
    "elsefi": ['=else', "&blocks", '=fi'], // 2.0
    "fi": ['=fi'] // 2.1
  },
  "cmddef": { // command definition 3
    "{cmd}[x]{blocks}": ['={', '=othercmd', '=}', "&cmddefargs", '={', "&blocks", '=}'], // 3.0
    "cmd[x]{blocks}": ['=othercmd', "&cmddefargs", '={', "&blocks", '=}'], // 3.1
    "*cmd[x]{blocks}": ['=*', '=othercmd', "&cmddefargs", '={', "&blocks", '=}'] // 3.2
  },
  "cmddefargs": { // command definition arguments 4
    "yes": ['=[', '=text', '=]'], // 4.0
    "no": [] // 4.1
  },
  "cmd*": { // othercmd star : 5
    "yes": ['=*'], // 5.0
    "no": [] // 5.1
  },
  "cmdoptargs": { // othercmd optional arguments 6
    "yes": ['=[', "&blocks", '=]'], // 6.0
    "no": [] // 6.1
  },
  "cmdargs": { // othercmd arguments : 7
    "add": ['={', "&blocks", '=}', "&cmdargs"], // 7.0
    "end": [] // 7.1
  }
};

const G = exports.G = _jsGrammar.grammar.from({ start, eof, productions });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbInN0YXJ0IiwiZW9mIiwicHJvZHVjdGlvbnMiLCJHIiwiZnJvbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBLE1BQU1BLFFBQVEsUUFBZDtBQUNBLE1BQU1DLE1BQU0sR0FBWjtBQUNBLE1BQU1DLGNBQWM7QUFDbEIsWUFBVyxFQUFFO0FBQ1gsV0FBUSxDQUFFLFFBQUYsRUFBYSxTQUFiLENBREMsRUFDMEI7QUFDbkMsV0FBUSxFQUZDLENBRUs7QUFGTCxHQURPO0FBS2xCLFdBQVUsRUFBRTtBQUNWLFlBQVMsQ0FBRSxPQUFGLENBREQsRUFDZTtBQUN2QixhQUFVLENBQUUsUUFBRixFQUFhLFFBQWIsQ0FGRixFQUU0QjtBQUNwQyxhQUFVLENBQUUsUUFBRixFQUFhLFNBQWIsRUFBeUIsUUFBekIsQ0FIRixFQUd3QztBQUNoRCxnQkFBYSxDQUFFLFdBQUYsQ0FKTCxFQUl1QjtBQUMvQixlQUFZLENBQUUsVUFBRixDQUxKLEVBS3FCO0FBQzdCLGVBQVksQ0FBRSxVQUFGLENBTkosRUFNcUI7QUFDN0IsZ0JBQWEsQ0FBRSxXQUFGLEVBQWdCLE9BQWhCLEVBQTBCLGFBQTFCLEVBQTBDLFVBQTFDLENBUEwsRUFPOEQ7QUFDdEUsV0FBUSxDQUFFLE1BQUYsRUFBVyxXQUFYLEVBQXlCLElBQXpCLEVBQWdDLFNBQWhDLEVBQTRDLElBQTVDLENBUkEsRUFRcUQ7QUFDN0Qsa0JBQWUsQ0FBRSxhQUFGLEVBQWtCLFNBQWxCLENBVFAsRUFTdUM7QUFDL0MsZ0JBQWEsQ0FBRSxJQUFGLEVBQVMsU0FBVCxFQUFxQixJQUFyQixDQVZMLEVBVW1DO0FBQzNDLGdCQUFhLENBQUUsSUFBRixFQUFTLFNBQVQsRUFBcUIsSUFBckIsQ0FYTCxFQVdtQztBQUMzQyxTQUFNLENBQUUsSUFBRixDQVpFLEVBWVM7QUFDakIsV0FBUSxDQUFFLE1BQUYsQ0FiQSxDQWFhO0FBYmIsR0FMUTtBQW9CbEIsV0FBVSxFQUFFO0FBQ1YsY0FBVyxDQUFFLE9BQUYsRUFBWSxTQUFaLEVBQXdCLEtBQXhCLENBREgsRUFDcUM7QUFDN0MsVUFBTyxDQUFFLEtBQUYsQ0FGQyxDQUVXO0FBRlgsR0FwQlE7QUF3QmxCLFlBQVcsRUFBRTtBQUNYLHdCQUFxQixDQUFFLElBQUYsRUFBUyxXQUFULEVBQXVCLElBQXZCLEVBQThCLGFBQTlCLEVBQThDLElBQTlDLEVBQXFELFNBQXJELEVBQWlFLElBQWpFLENBRFosRUFDc0Y7QUFDL0Ysc0JBQW1CLENBQUUsV0FBRixFQUFnQixhQUFoQixFQUFnQyxJQUFoQyxFQUF1QyxTQUF2QyxFQUFtRCxJQUFuRCxDQUZWLEVBRXNFO0FBQy9FLHVCQUFvQixDQUFFLElBQUYsRUFBUyxXQUFULEVBQXVCLGFBQXZCLEVBQXVDLElBQXZDLEVBQThDLFNBQTlDLEVBQTBELElBQTFELENBSFgsQ0FHOEU7QUFIOUUsR0F4Qk87QUE2QmxCLGdCQUFlLEVBQUU7QUFDZixXQUFRLENBQUUsSUFBRixFQUFTLE9BQVQsRUFBbUIsSUFBbkIsQ0FESyxFQUN1QjtBQUNwQyxVQUFPLEVBRk0sQ0FFQTtBQUZBLEdBN0JHO0FBaUNsQixVQUFTLEVBQUU7QUFDVCxXQUFRLENBQUUsSUFBRixDQURELEVBQ1k7QUFDbkIsVUFBTyxFQUZBLENBRU07QUFGTixHQWpDUztBQXFDbEIsZ0JBQWUsRUFBRTtBQUNmLFdBQVEsQ0FBRSxJQUFGLEVBQVMsU0FBVCxFQUFxQixJQUFyQixDQURLLEVBQ3lCO0FBQ3RDLFVBQU8sRUFGTSxDQUVBO0FBRkEsR0FyQ0c7QUF5Q2xCLGFBQVksRUFBRTtBQUNaLFdBQVEsQ0FBRSxJQUFGLEVBQVMsU0FBVCxFQUFxQixJQUFyQixFQUE0QixVQUE1QixDQURFLEVBQ3lDO0FBQ25ELFdBQVEsRUFGRSxDQUVJO0FBRko7QUF6Q00sQ0FBcEI7O0FBK0NPLE1BQU1DLGdCQUFJLG1CQUFRQyxJQUFSLENBQWMsRUFBRUosS0FBRixFQUFVQyxHQUFWLEVBQWdCQyxXQUFoQixFQUFkLENBQVYiLCJmaWxlIjoiZ3JhbW1hci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdyYW1tYXIgfSBmcm9tICdAYXVyZW9vbXMvanMtZ3JhbW1hcicgO1xuXG5jb25zdCBzdGFydCA9IFwiYmxvY2tzXCIgO1xuY29uc3QgZW9mID0gXCIkXCIgO1xuY29uc3QgcHJvZHVjdGlvbnMgPSB7XG4gIFwiYmxvY2tzXCIgOiB7IC8vIGJsb2NrcyA6IDBcbiAgICBcImFkZFwiIDogWyBcIiZibG9ja1wiICwgXCImYmxvY2tzXCIgXSAsIC8vIDAuMFxuICAgIFwiZW5kXCIgOiBbIF0gLCAvLyAwLjFcbiAgfSAsXG4gIFwiYmxvY2tcIiA6IHsgLy8gYmxvY2sgOiAxXG4gICAgXCJ0ZXh0XCIgOiBbICc9dGV4dCcgXSAsIC8vIDEuMFxuICAgIFwibmV3aWZcIiA6IFsgJz1uZXdpZicgLCAnPWlmY21kJyBdICwgLy8gMS4xXG4gICAgXCJpZmNtZFwiIDogWyAnPWlmY21kJyAsIFwiJmJsb2Nrc1wiICwgXCImZW5kaWZcIiBdICwgLy8gMS4yXG4gICAgXCJmYWxzZWNtZFwiIDogWyAnPWZhbHNlY21kJyBdICwgLy8gMS4zXG4gICAgXCJ0cnVlY21kXCIgOiBbICc9dHJ1ZWNtZCcgXSAsIC8vIDEuNFxuICAgIFwiY29tbWVudFwiIDogWyAnPWNvbW1lbnQnIF0gLCAvLyAxLjVcbiAgICBcIm90aGVyY21kXCIgOiBbICc9b3RoZXJjbWQnICwgXCImY21kKlwiICwgXCImY21kb3B0YXJnc1wiICwgXCImY21kYXJnc1wiIF0gLCAvLyAxLjZcbiAgICBcImRlZlwiIDogWyAnPWRlZicgLCAnPW90aGVyY21kJyAsICc9eycgLCBcIiZibG9ja3NcIiAsICc9fScgXSAsIC8vIDEuN1xuICAgIFwibmV3Y29tbWFuZFwiIDogWyAnPW5ld2NvbW1hbmQnICwgXCImY21kZGVmXCIgXSAsIC8vIDEuOFxuICAgIFwie2Jsb2Nrc31cIiA6IFsgJz17JyAsIFwiJmJsb2Nrc1wiICwgJz19JyBdICwgLy8gMS45XG4gICAgXCJbYmxvY2tzXVwiIDogWyAnPVsnICwgXCImYmxvY2tzXCIgLCAnPV0nIF0gLCAvLyAxLjEwXG4gICAgXCIqXCIgOiBbICc9KicgXSAsIC8vIDEuMTFcbiAgICBcImFyZ1wiIDogWyAnPWFyZycgXSAsIC8vIDEuMTJcbiAgfSAsXG4gIFwiZW5kaWZcIiA6IHsgLy8gZW5kaWYgOiAyXG4gICAgXCJlbHNlZmlcIiA6IFsgJz1lbHNlJyAsIFwiJmJsb2Nrc1wiICwgJz1maScgXSAsIC8vIDIuMFxuICAgIFwiZmlcIiA6IFsgJz1maScgXSAsIC8vIDIuMVxuICB9ICxcbiAgXCJjbWRkZWZcIiA6IHsgLy8gY29tbWFuZCBkZWZpbml0aW9uIDNcbiAgICBcIntjbWR9W3hde2Jsb2Nrc31cIiA6IFsgJz17JyAsICc9b3RoZXJjbWQnICwgJz19JyAsIFwiJmNtZGRlZmFyZ3NcIiAsICc9eycgLCBcIiZibG9ja3NcIiAsICc9fScgXSAsIC8vIDMuMFxuICAgIFwiY21kW3hde2Jsb2Nrc31cIiA6IFsgJz1vdGhlcmNtZCcgLCBcIiZjbWRkZWZhcmdzXCIgLCAnPXsnICwgXCImYmxvY2tzXCIgLCAnPX0nIF0gLCAvLyAzLjFcbiAgICBcIipjbWRbeF17YmxvY2tzfVwiIDogWyAnPSonICwgJz1vdGhlcmNtZCcgLCBcIiZjbWRkZWZhcmdzXCIgLCAnPXsnICwgXCImYmxvY2tzXCIgLCAnPX0nIF0gLCAvLyAzLjJcbiAgfSAsXG4gIFwiY21kZGVmYXJnc1wiIDogeyAvLyBjb21tYW5kIGRlZmluaXRpb24gYXJndW1lbnRzIDRcbiAgICBcInllc1wiIDogWyAnPVsnICwgJz10ZXh0JyAsICc9XScgXSAsIC8vIDQuMFxuICAgIFwibm9cIiA6IFsgXSAsIC8vIDQuMVxuICB9ICxcbiAgXCJjbWQqXCIgOiB7IC8vIG90aGVyY21kIHN0YXIgOiA1XG4gICAgXCJ5ZXNcIiA6IFsgJz0qJyBdICwgLy8gNS4wXG4gICAgXCJub1wiIDogWyBdICwgLy8gNS4xXG4gIH0gLFxuICBcImNtZG9wdGFyZ3NcIiA6IHsgLy8gb3RoZXJjbWQgb3B0aW9uYWwgYXJndW1lbnRzIDZcbiAgICBcInllc1wiIDogWyAnPVsnICwgXCImYmxvY2tzXCIgLCAnPV0nIF0gLCAvLyA2LjBcbiAgICBcIm5vXCIgOiBbIF0gLCAvLyA2LjFcbiAgfSAsXG4gIFwiY21kYXJnc1wiIDogeyAvLyBvdGhlcmNtZCBhcmd1bWVudHMgOiA3XG4gICAgXCJhZGRcIiA6IFsgJz17JyAsIFwiJmJsb2Nrc1wiICwgJz19JyAsIFwiJmNtZGFyZ3NcIiBdICwgLy8gNy4wXG4gICAgXCJlbmRcIiA6IFsgXSAsIC8vIDcuMVxuICB9ICxcbn0gO1xuXG5leHBvcnQgY29uc3QgRyA9IGdyYW1tYXIuZnJvbSggeyBzdGFydCAsIGVvZiAsIHByb2R1Y3Rpb25zIH0gKSA7XG4iXX0=