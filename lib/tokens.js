'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tokens = tokens;
function* tokens(string) {

  let i = 0;
  let n = string.length;

  let buffer = '';

  const flush = function* () {
    if (buffer !== '') {
      yield ['text', buffer];
      buffer = '';
    }
  };

  while (i < n) {
    const c = string[i];
    if (c === '\\') {

      // read command

      let cmd = c;
      while (++i < n) {
        const d = string[i];
        // http://www.tex.ac.uk/FAQ-whatmacros.html
        if (d >= 'a' && d <= 'z' || d >= 'A' && d <= 'Z') cmd += d;else {
          if (cmd === '\\') {
            cmd += d;
            ++i;
          }
          break;
        }
      }

      yield* flush();

      if (cmd.substr(0, 3) === '\\if') yield ['ifcmd', cmd];else if (cmd.substr(cmd.length - 5, 5) === 'false') yield ['falsecmd', cmd];else if (cmd.substr(cmd.length - 4, 4) === 'true') yield ['truecmd', cmd];else if (cmd === '\\newif') yield ['newif', cmd];else if (cmd === '\\else') yield ['else', cmd];else if (cmd === '\\def') yield ['def', cmd];else if (cmd === '\\newcommand') yield ['newcommand', cmd];else if (cmd === '\\fi') yield ['fi', cmd];else yield ['othercmd', cmd];
    } else if (c === '#') {

      // read arg number
      let arg = '#';
      while (++i < n) {
        const d = string[i];
        if (d >= '0' && d <= '9') arg += d;else {
          if (arg === '#') throw new Error('Incomplete #');
          break;
        }
      }
      yield* flush();
      yield ['arg', arg];
    } else if (c === '{') {
      yield* flush();
      yield ['{', '{'];
      ++i;
    } else if (c === '}') {
      yield* flush();
      yield ['}', '}'];
      ++i;
    } else if (c === '[') {
      yield* flush();
      yield ['[', '['];
      ++i;
    } else if (c === ']') {
      yield* flush();
      yield [']', ']'];
      ++i;
    } else if (c === '*') {
      yield* flush();
      yield ['*', '*'];
      ++i;
    } else if (c === '%') {
      yield* flush();
      buffer = '%';
      let d = '';
      while (++i < n) {
        d = string[i];
        if (d === '\n') break;
        buffer += d;
      }
      yield ['comment', buffer];
      buffer = d;
      ++i;
    } else {
      buffer += c;
      ++i;
    }
  }

  yield* flush();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90b2tlbnMuanMiXSwibmFtZXMiOlsidG9rZW5zIiwic3RyaW5nIiwiaSIsIm4iLCJsZW5ndGgiLCJidWZmZXIiLCJmbHVzaCIsImMiLCJjbWQiLCJkIiwic3Vic3RyIiwiYXJnIiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7O1FBQWlCQSxNLEdBQUFBLE07QUFBVixVQUFVQSxNQUFWLENBQW1CQyxNQUFuQixFQUE0Qjs7QUFFakMsTUFBSUMsSUFBSSxDQUFSO0FBQ0EsTUFBSUMsSUFBSUYsT0FBT0csTUFBZjs7QUFFQSxNQUFJQyxTQUFTLEVBQWI7O0FBRUEsUUFBTUMsUUFBUSxhQUFhO0FBQ3pCLFFBQUtELFdBQVcsRUFBaEIsRUFBcUI7QUFDbkIsWUFBTSxDQUFFLE1BQUYsRUFBV0EsTUFBWCxDQUFOO0FBQ0FBLGVBQVMsRUFBVDtBQUNEO0FBQ0YsR0FMRDs7QUFPQSxTQUFRSCxJQUFJQyxDQUFaLEVBQWdCO0FBQ2QsVUFBTUksSUFBSU4sT0FBT0MsQ0FBUCxDQUFWO0FBQ0EsUUFBS0ssTUFBTSxJQUFYLEVBQWtCOztBQUVoQjs7QUFFQSxVQUFJQyxNQUFNRCxDQUFWO0FBQ0EsYUFBUSxFQUFFTCxDQUFGLEdBQU1DLENBQWQsRUFBa0I7QUFDdkIsY0FBTU0sSUFBSVIsT0FBT0MsQ0FBUCxDQUFWO0FBQ0E7QUFDQSxZQUFPTyxLQUFLLEdBQUwsSUFBWUEsS0FBSyxHQUFuQixJQUE4QkEsS0FBSyxHQUFMLElBQVlBLEtBQUssR0FBcEQsRUFBNERELE9BQU9DLENBQVAsQ0FBNUQsS0FDSztBQUNILGNBQUtELFFBQVEsSUFBYixFQUFvQjtBQUNsQkEsbUJBQU9DLENBQVA7QUFDQSxjQUFFUCxDQUFGO0FBQ0Q7QUFDRDtBQUNEO0FBQ0s7O0FBRUQsYUFBT0ksT0FBUDs7QUFFQSxVQUFLRSxJQUFJRSxNQUFKLENBQVcsQ0FBWCxFQUFhLENBQWIsTUFBb0IsTUFBekIsRUFBa0MsTUFBTSxDQUFFLE9BQUYsRUFBWUYsR0FBWixDQUFOLENBQWxDLEtB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O0FBRUQiLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uKiB0b2tlbnMgKCBzdHJpbmcgKSB7XG5cbiAgbGV0IGkgPSAwIDtcbiAgbGV0IG4gPSBzdHJpbmcubGVuZ3RoIDtcblxuICBsZXQgYnVmZmVyID0gJyc7XG5cbiAgY29uc3QgZmx1c2ggPSBmdW5jdGlvbiogKCkge1xuICAgIGlmICggYnVmZmVyICE9PSAnJyApIHtcbiAgICAgIHlpZWxkIFsgJ3RleHQnICwgYnVmZmVyIF0gO1xuICAgICAgYnVmZmVyID0gJyc7XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKCBpIDwgbiApIHtcbiAgICBjb25zdCBjID0gc3RyaW5nW2ldIDtcbiAgICBpZiAoIGMgPT09ICdcXFxcJyApIHtcblxuICAgICAgLy8gcmVhZCBjb21tYW5kXG5cbiAgICAgIGxldCBjbWQgPSBjIDtcbiAgICAgIHdoaWxlICggKytpIDwgbiApIHtcblx0Y29uc3QgZCA9IHN0cmluZ1tpXTtcblx0Ly8gaHR0cDovL3d3dy50ZXguYWMudWsvRkFRLXdoYXRtYWNyb3MuaHRtbFxuXHRpZiAoICggZCA+PSAnYScgJiYgZCA8PSAneicgKSB8fCAoIGQgPj0gJ0EnICYmIGQgPD0gJ1onICkgKSBjbWQgKz0gZDtcblx0ZWxzZSB7XG5cdCAgaWYgKCBjbWQgPT09ICdcXFxcJyApIHtcblx0ICAgIGNtZCArPSBkO1xuXHQgICAgKytpO1xuXHQgIH1cblx0ICBicmVhaztcblx0fVxuICAgICAgfVxuXG4gICAgICB5aWVsZCogZmx1c2goKTtcblxuICAgICAgaWYgKCBjbWQuc3Vic3RyKDAsMykgPT09ICdcXFxcaWYnICkgeWllbGQgWyAnaWZjbWQnICwgY21kIF0gO1xuXG4gICAgICBlbHNlIGlmIChjbWQuc3Vic3RyKGNtZC5sZW5ndGgtNSwgNSkgPT09ICdmYWxzZScgKSB5aWVsZCBbICdmYWxzZWNtZCcgLCBjbWQgXSA7XG5cbiAgICAgIGVsc2UgaWYgKGNtZC5zdWJzdHIoY21kLmxlbmd0aC00LCA0KSA9PT0gJ3RydWUnICkgeWllbGQgWyAndHJ1ZWNtZCcgLCBjbWQgXSA7XG5cbiAgICAgIGVsc2UgaWYgKCBjbWQgPT09ICdcXFxcbmV3aWYnICkgIHlpZWxkIFsgJ25ld2lmJyAsIGNtZCBdIDtcblxuICAgICAgZWxzZSBpZiAoIGNtZCA9PT0gJ1xcXFxlbHNlJyApICB5aWVsZCBbICdlbHNlJyAsIGNtZCBdIDtcblxuICAgICAgZWxzZSBpZiAoIGNtZCA9PT0gJ1xcXFxkZWYnICkgIHlpZWxkIFsgJ2RlZicgLCBjbWQgXSA7XG5cbiAgICAgIGVsc2UgaWYgKCBjbWQgPT09ICdcXFxcbmV3Y29tbWFuZCcgKSAgeWllbGQgWyAnbmV3Y29tbWFuZCcgLCBjbWQgXSA7XG5cbiAgICAgIGVsc2UgaWYgKCBjbWQgPT09ICdcXFxcZmknICkgIHlpZWxkIFsgJ2ZpJyAsIGNtZCBdIDtcblxuICAgICAgZWxzZSB5aWVsZCBbICdvdGhlcmNtZCcgLCBjbWQgXSA7XG5cbiAgICB9XG4gICAgZWxzZSBpZiAoIGMgPT09ICcjJyApIHtcblxuICAgICAgLy8gcmVhZCBhcmcgbnVtYmVyXG4gICAgICBsZXQgYXJnID0gJyMnIDtcbiAgICAgIHdoaWxlICggKytpIDwgbiApIHtcblx0Y29uc3QgZCA9IHN0cmluZ1tpXTtcblx0aWYgKCBkID49ICcwJyAmJiBkIDw9ICc5JyApIGFyZyArPSBkO1xuXHRlbHNlIHtcblx0ICBpZiAoIGFyZyA9PT0gJyMnICkgdGhyb3cgbmV3IEVycm9yKCdJbmNvbXBsZXRlICMnKSA7XG5cdCAgYnJlYWs7XG5cdH1cbiAgICAgIH1cbiAgICAgIHlpZWxkKiBmbHVzaCgpO1xuICAgICAgeWllbGQgWyAnYXJnJyAsIGFyZyBdXG4gICAgfVxuICAgIGVsc2UgaWYgKCBjID09PSAneycgKSB7XG4gICAgICB5aWVsZCogZmx1c2goKTtcbiAgICAgIHlpZWxkIFsgJ3snICwgJ3snIF0gO1xuICAgICAgKytpO1xuICAgIH1cbiAgICBlbHNlIGlmICggYyA9PT0gJ30nICkge1xuICAgICAgeWllbGQqIGZsdXNoKCk7XG4gICAgICB5aWVsZCBbICd9JyAsICd9JyBdIDtcbiAgICAgICsraTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIGMgPT09ICdbJyApIHtcbiAgICAgIHlpZWxkKiBmbHVzaCgpO1xuICAgICAgeWllbGQgWyAnWycgLCAnWycgXSA7XG4gICAgICArK2k7XG4gICAgfVxuICAgIGVsc2UgaWYgKCBjID09PSAnXScgKSB7XG4gICAgICB5aWVsZCogZmx1c2goKTtcbiAgICAgIHlpZWxkIFsgJ10nICwgJ10nIF0gO1xuICAgICAgKytpO1xuICAgIH1cbiAgICBlbHNlIGlmICggYyA9PT0gJyonICkge1xuICAgICAgeWllbGQqIGZsdXNoKCk7XG4gICAgICB5aWVsZCBbICcqJyAsICcqJyBdIDtcbiAgICAgICsraTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIGMgPT09ICclJykge1xuICAgICAgeWllbGQqIGZsdXNoKCk7XG4gICAgICBidWZmZXIgPSAnJSc7XG4gICAgICBsZXQgZCA9ICcnO1xuICAgICAgd2hpbGUgKCArK2kgPCBuICkge1xuXHRkID0gc3RyaW5nW2ldO1xuXHRpZiAoIGQgPT09ICdcXG4nICkgYnJlYWsgO1xuXHRidWZmZXIgKz0gZCA7XG4gICAgICB9XG4gICAgICB5aWVsZCBbICdjb21tZW50JyAsIGJ1ZmZlciBdIDtcbiAgICAgIGJ1ZmZlciA9IGQ7XG4gICAgICArK2k7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYnVmZmVyICs9IGMgO1xuICAgICAgKytpO1xuICAgIH1cbiAgfVxuXG4gIHlpZWxkKiBmbHVzaCgpO1xuXG59XG4iXX0=